/*
	Http请求报文：
		Get请求：表示要获取Web服务器内容,不会修改服务器数据
		POST请求：表示要向Web服务器提交内容，通常会修改服务器上的内容
		请求报文的组成：1.请求行-定义请求方式,请求资源路径,协议版本:GET /index.2022-1-12-html/1.1 \r\n（\r\n实现换行）
					 2.请求头-设置网页的相关属性-格式为：多对key:value,末尾为\r\n换行
					 3.空行-\r\n，换行
					 4.请求体（GET方式没有请求体）-想要给服务器传递的数据！！

	Http应答报文：
		组成：1.应答行-HTTP/1.1 200 ok（HTTP协议版本,状态码,状态描述）+\r\n
			 2.应答头-设置应答数据的相关属性-格式为：多对key:value+\r\n
			 3.空行--\r\n，换行
			 4.应答体-服务器发送给浏览器的数据-各种格式（HTML,css,js,图片视频等）

	HTTP请求方法：
		1.GET：请求指定的页面信息，并返回实体主体；
		2.HEAD：类似于GET请求，只不过返回的响应中没有具体内容，用于获取报头
		3.POST：向指定资源提交数据进行处理请求（例如提交表单或这上传文件），数据被包含在请求体中，POST请求可能会导致
		  新的资源建立或已有资源的修改
		4.PUT：从客户端向服务器传送的数据取代指定的文档的内容
		5.DELETE：请求服务器删除指定的页面
		6.CONNECT：HTTP/1.1协议中预留给能够将链接改为管道方式的代理服务器
		7.OPTIONS：允许客户端查看服务器的性能
		8.TRACE：回显服务器收到的请求，主要用于测试和诊断
		9.PATCH：是对PUT方法的补充，用来对已知资源进行局部更新


	GET请求的参数：
		GET请求的参数是放在URL中的,网页中可以看见：
		URL=https://www.bilibili.com/video/BV165411A7ef?p=4&spm_id_from=pageDriver
		请求参数以键值对形式出现,一般形式为：
		1）网址后面紧跟着一个问号
		2）问号的后面是一对对参数,形式为：参数1 = 参数1的值
		3）多个参数之间用&符号隔开：参数1 = 参数1的值&参数2 = 参数2的值&参数3 = 参数3的值...参数N = 参数N的值

	POST请求的参数：
		1）POST请求的参数放在请求体中
		2）网页上看不见
		3）可以通过Chrome开发者工具或者抓包工具看见

	请求头
		爬虫的关键技术之一，服务器通常通过请求头来：
		1）判定请求是否合法，是基本的反爬措施，爬虫通常需要添加多个请求头来模拟真实的网页请求
		2）判断用户是否登录了,一般通过cookie这个特殊的请求头的内容来判定，只要我们给出合理的cookie,服务器就认为
		  我们是登录过了
		请求头列表重要参数：
		1）User-Agent：代表发起访问的是什么浏览器,如果不写,基本会被判定为爬虫,直接拒绝（“httpbin.org/get”可以查看请求内容的网站）
		2）Cookie：记录了登录信息，或者上次请求服务端设置的信息,是常用的反爬判定点
		3）Referer：表示这次请求是从哪里点过来的,有的网站不允许直接访问某个网页，必须是从其他网页点过来才行,
		  这时候需要设置一个Referer值,模拟是从别的网页点过来的情况

	主要流程：
		1）请求：
			1.地址和关键词：例如GET：URL
			2.请求头（Header）：用来描述请求和发送者的一些信息
			3.请求参数：要搜索的关键词
		2）响应：
			1.响应代码：如200表示成功，404表示不存在等
			2.响应头：描述响应内容的一些信息
			3.响应内容：HTML,JSON,图片等
		请求和响应例子：
		客户端请求：
		GET /hello.txt HTTP/1.1
		User-Agent：curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.71 zlib/1.2.3
		Host:www.example.com
		Accept-Language:en,mi
		服务端响应：
		HTTP/1.1 200 ok
		Date：Mon，27 Jul 2009  12:28:53 GMT
		Server:Apache
		Last-Modified:Wed, 22 Jul 2009 19:15:56 GMT
		ETag:"34aa387-d-1568eb00"
		Accept-Ranges:bytes
		Content-Length:51
		Vary:Accept-Encoding
		Content-Type:text/plain

	响应状态码：
		当浏览器访问一个网页时,浏览者的浏览器会向网页所在服务器发出请求,当浏览器接受并显示网页前,此网页所再服务器会返回一个
	  包含HTTP状态码的信息头（Server header）用以响应浏览器的请求
	  HTTP状态码的英文为：HTTP Status Code
	  常见HTTP状态码为：
	  1.200-请求成功
	  2.301-资源（网页等）被永久转移到其他URL
	  3.404-请求的资源或网页不存在
	  4.500-内部服务器错误
	  HTTP状态码有三个数字组成,第一个数字定义了状态码的类型，后两个数字表示具体状态,HTTP状态码共分为5中类型：
	  1**-信息,服务器收到请求,需要请求者继续执行操作
	  2**-成功,操作被成功接收并处理
	  3**-重定向，需要进一步的操作以完成请求
	  4**-客户端错误，请求包含语法错误或无法完成请求
	  5**-服务器错误,服务器在处理请求的过程中发生了错误

*/

package main

func main() {

}
