/*
	匿名函数:
		指不需要定义函数名的一种函数实现方式(类似于Java的匿名内部类)
		定义格式:
			变量名 := func (形参列表) (返回值列表){
				功能代码
			}
		调用方法:
			变量名()
		定义匿名函数并调用:
			func (形参列表) (返回值列表) {
				功能代码
			} () // ()代表调用函数, 在调用时也可以在()中书写对应形参
	闭包:
		指一个函数捕获了和它在同一作用域的其他常量和变量,当闭包被调用时,不管在程序什么地方调用, 闭包都可以使用这些常量或者变量
		闭包不关心捕获的常量和变量是否已经超出了作用域, 所以只要闭包还在使用这些常量和变量,这些常量和变量就会存在
	在Go语言中,所有的匿名函数都是闭包！！
	闭包捕获外部变量的特点:
		闭包以引用方式捕获外部变量, 在闭包中对外部变量进行修改, 外部变量的值会同步改变
*/

package main

import "fmt"

func main() {
	var i int = 10
	var j int = 100

	// 匿名函数定义
	f1 := func() {
		fmt.Println("闭包捕获变量i=", i)
		i = 100 // 修改捕获外部变量i的值
		fmt.Println("闭包捕获并修改后变量i=", i)
		fmt.Println("变量j=", j)
	}
	// 匿名函数调用
	f1()
	fmt.Println("外部变量i的值为:", i)

}
