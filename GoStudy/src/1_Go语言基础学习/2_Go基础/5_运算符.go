package main

import "fmt"

/*
	算数运算符:
		+: 加, A + B
		-: 减, A - B
		*: 乘, A * B
		/: 除, A / B
		%: 取余, A % B
		++: 自增运算符, 将整数值加1, A++
		--: 自减运算符, 将整数值减一, A--
	关系运算符:
		==: 检查两个变量的值是否相等, A == B
		!=: 检查两个变量的值是否不相等, A != B
		>: 大于, A > B
		<: 小于, A < B
		>=: 大于或等于, A >= B
		<=: 小于或等于, A <= B
	逻辑运算符:
		&&: 逻辑与运算符,
		||: 逻辑或运算符-
		!: 逻辑非运算符
	按位运算符:
		&: 按位与,都为1则结果为1
		|: 按位或,有一个为1则结果为1
		^: 按位异或,对应位不同数值时结果为1
		<<: 左移, 按照二进制位向左移位, 高位丢弃, 低位补0
		>>: 右移, 按照二进制位向右移位, 高位补0, 低位丢弃
	赋值运算符:
		=: 基本赋值运算符
		+=: 相加后再赋值
		-=: 相减后赋值
		*=: 相乘后赋值
		/=: 相除后赋值
		%=: 求余后赋值
		<<=: 左移后赋值
		>>=: 右移后赋值
		&=: 按位与后赋值
		^=: 按位异或后赋值
		|=: 按位或后赋值
*/

func main() {
	// 调用函数
	// arithmeticOperator()
	anOperator()
}

// 算数运算符实例
func arithmeticOperator() {
	var a int = 10
	var b int = 20.0
	fmt.Printf("%d + %d = %d\n", a, b, a+b)
	fmt.Printf("%d - %d = %d\n", a, b, a-b)
	fmt.Printf("%d * %d = %d\n", a, b, a*b)
	fmt.Printf("%d / %d = %d\n", a, b, a/b)
	fmt.Printf("%d %% %d = %d\n", a, 5, a%5)
	a++
	fmt.Printf("a++ = %d\n", a)
	b--
	fmt.Printf("b-- = %d\n", b)
}

// 位运算符实例
func anOperator() {
	// 定义变量
	var a int = 60
	var b int = 13
	fmt.Printf("a的二进制表示为:%b\n", a)
	fmt.Printf("b的二进制表示为:%b\n", b)
	fmt.Printf("a & b = %b\n", a&b)   // a和b按二进制位相与 00111100 & 00001101 == 00001100 ==> 同1为1, 有0为0
	fmt.Printf("a | b = %b\n", a|b)   // a和b按二进制位相或 00111100 | 00001101 == 00111101 ==> 有1为1, 同0为0
	fmt.Printf("a ^ b = %b\n", a^b)   // a和b按二进制位相异或 00111100 ^ 00001101 == 00110001 ==> 相同为0, 不同为1
	fmt.Printf("a << 2 = %b\n", a<<2) // a的二进制位向左移动两位 00111100 << 2 = 11110000
	fmt.Printf("b >> 2 = %b\n", b>>2) // b的二进制位向右移动两位 00001101 >> 2 = 00000011
}
